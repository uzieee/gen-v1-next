/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:types` to regenerate this file.
 */

/**
 * Supported timezones in IANA format.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "supportedTimezones".
 */
export type SupportedTimezones =
  | 'Pacific/Midway'
  | 'Pacific/Niue'
  | 'Pacific/Honolulu'
  | 'Pacific/Rarotonga'
  | 'America/Anchorage'
  | 'Pacific/Gambier'
  | 'America/Los_Angeles'
  | 'America/Tijuana'
  | 'America/Denver'
  | 'America/Phoenix'
  | 'America/Chicago'
  | 'America/Guatemala'
  | 'America/New_York'
  | 'America/Bogota'
  | 'America/Caracas'
  | 'America/Santiago'
  | 'America/Buenos_Aires'
  | 'America/Sao_Paulo'
  | 'Atlantic/South_Georgia'
  | 'Atlantic/Azores'
  | 'Atlantic/Cape_Verde'
  | 'Europe/London'
  | 'Europe/Berlin'
  | 'Africa/Lagos'
  | 'Europe/Athens'
  | 'Africa/Cairo'
  | 'Europe/Moscow'
  | 'Asia/Riyadh'
  | 'Asia/Dubai'
  | 'Asia/Baku'
  | 'Asia/Karachi'
  | 'Asia/Tashkent'
  | 'Asia/Calcutta'
  | 'Asia/Dhaka'
  | 'Asia/Almaty'
  | 'Asia/Jakarta'
  | 'Asia/Bangkok'
  | 'Asia/Shanghai'
  | 'Asia/Singapore'
  | 'Asia/Tokyo'
  | 'Asia/Seoul'
  | 'Australia/Brisbane'
  | 'Australia/Sydney'
  | 'Pacific/Guam'
  | 'Pacific/Noumea'
  | 'Pacific/Auckland'
  | 'Pacific/Fiji';

export interface Config {
  auth: {
    users: UserAuthOperations;
  };
  blocks: {};
  collections: {
    users: User;
    media: Media;
    attributes: Attribute;
    'attribute-categories': AttributeCategory;
    'user-attributes': UserAttribute;
    organizers: Organizer;
    events: Event;
    tickets: Ticket;
    professions: Profession;
    startups: Startup;
    'payload-locked-documents': PayloadLockedDocument;
    'payload-preferences': PayloadPreference;
    'payload-migrations': PayloadMigration;
  };
  collectionsJoins: {};
  collectionsSelect: {
    users: UsersSelect<false> | UsersSelect<true>;
    media: MediaSelect<false> | MediaSelect<true>;
    attributes: AttributesSelect<false> | AttributesSelect<true>;
    'attribute-categories': AttributeCategoriesSelect<false> | AttributeCategoriesSelect<true>;
    'user-attributes': UserAttributesSelect<false> | UserAttributesSelect<true>;
    organizers: OrganizersSelect<false> | OrganizersSelect<true>;
    events: EventsSelect<false> | EventsSelect<true>;
    tickets: TicketsSelect<false> | TicketsSelect<true>;
    professions: ProfessionsSelect<false> | ProfessionsSelect<true>;
    startups: StartupsSelect<false> | StartupsSelect<true>;
    'payload-locked-documents': PayloadLockedDocumentsSelect<false> | PayloadLockedDocumentsSelect<true>;
    'payload-preferences': PayloadPreferencesSelect<false> | PayloadPreferencesSelect<true>;
    'payload-migrations': PayloadMigrationsSelect<false> | PayloadMigrationsSelect<true>;
  };
  db: {
    defaultIDType: string;
  };
  globals: {};
  globalsSelect: {};
  locale: null;
  user: User & {
    collection: 'users';
  };
  jobs: {
    tasks: unknown;
    workflows: unknown;
  };
}
export interface UserAuthOperations {
  forgotPassword: {
    email: string;
    password: string;
  };
  login: {
    email: string;
    password: string;
  };
  registerFirstUser: {
    email: string;
    password: string;
  };
  unlock: {
    email: string;
    password: string;
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users".
 */
export interface User {
  id: string;
  fullName?: string | null;
  gender?: string | null;
  dateOfBirth?: string | null;
  phoneNumber: string;
  role: 'admin' | 'member';
  isPhoneNumberVerified?: boolean | null;
  isEmailVerified?: boolean | null;
  attributes?: (string | Attribute)[] | null;
  profileImage?: string | null;
  galleryImages?:
    | {
        url: string;
        id?: string | null;
      }[]
    | null;
  /**
   * Generated from profile details; editable by admins if needed.
   */
  bio?: string | null;
  profession?: (string | null) | Profession;
  startups?: (string | Startup)[] | null;
  updatedAt: string;
  createdAt: string;
  email: string;
  resetPasswordToken?: string | null;
  resetPasswordExpiration?: string | null;
  salt?: string | null;
  hash?: string | null;
  loginAttempts?: number | null;
  lockUntil?: string | null;
  password?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "attributes".
 */
export interface Attribute {
  id: string;
  label: string;
  category: string | AttributeCategory;
  description?: string | null;
  image?: string | null;
  users?: (string | User)[] | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "attribute-categories".
 */
export interface AttributeCategory {
  id: string;
  title: string;
  slug: string;
  description?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "professions".
 */
export interface Profession {
  id: string;
  user: string | User;
  /**
   * Attribute from "professional-fields" category
   */
  professionalField: string | Attribute;
  jobTitle: string;
  jobDescription?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "startups".
 */
export interface Startup {
  id: string;
  user: string | User;
  title?: string | null;
  stage: 'established' | 'building' | 'scaling' | 'idea';
  description?: string | null;
  /**
   * Attribute(s) from "professional-fields"
   */
  industries: (string | Attribute)[];
  supportNeeded?:
    | ('funding' | 'mentorship' | 'collaborators' | 'tools' | 'early-users' | 'encouragement' | 'other')[]
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media".
 */
export interface Media {
  id: string;
  alt: string;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  thumbnailURL?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  focalX?: number | null;
  focalY?: number | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "user-attributes".
 */
export interface UserAttribute {
  id: string;
  user: string | User;
  attribute: string | Attribute;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "organizers".
 */
export interface Organizer {
  id: string;
  name: string;
  slug?: string | null;
  about?: string | null;
  headerImage?: string | null;
  events?: (string | Event)[] | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "events".
 */
export interface Event {
  id: string;
  name: string;
  slug?: string | null;
  date: string;
  streetAddress: string;
  /**
   * lat / lng for map display
   *
   * @minItems 2
   * @maxItems 2
   */
  location: [number, number];
  headerImage?: string | null;
  about?: string | null;
  organizer: string | Organizer;
  capacity: number;
  ticketsSold?: number | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "tickets".
 */
export interface Ticket {
  id: string;
  event: string | Event;
  user: string | User;
  seatNumber?: string | null;
  tableNumber?: string | null;
  code?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents".
 */
export interface PayloadLockedDocument {
  id: string;
  document?:
    | ({
        relationTo: 'users';
        value: string | User;
      } | null)
    | ({
        relationTo: 'media';
        value: string | Media;
      } | null)
    | ({
        relationTo: 'attributes';
        value: string | Attribute;
      } | null)
    | ({
        relationTo: 'attribute-categories';
        value: string | AttributeCategory;
      } | null)
    | ({
        relationTo: 'user-attributes';
        value: string | UserAttribute;
      } | null)
    | ({
        relationTo: 'organizers';
        value: string | Organizer;
      } | null)
    | ({
        relationTo: 'events';
        value: string | Event;
      } | null)
    | ({
        relationTo: 'tickets';
        value: string | Ticket;
      } | null)
    | ({
        relationTo: 'professions';
        value: string | Profession;
      } | null)
    | ({
        relationTo: 'startups';
        value: string | Startup;
      } | null);
  globalSlug?: string | null;
  user: {
    relationTo: 'users';
    value: string | User;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences".
 */
export interface PayloadPreference {
  id: string;
  user: {
    relationTo: 'users';
    value: string | User;
  };
  key?: string | null;
  value?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations".
 */
export interface PayloadMigration {
  id: string;
  name?: string | null;
  batch?: number | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users_select".
 */
export interface UsersSelect<T extends boolean = true> {
  fullName?: T;
  gender?: T;
  dateOfBirth?: T;
  phoneNumber?: T;
  role?: T;
  isPhoneNumberVerified?: T;
  isEmailVerified?: T;
  attributes?: T;
  profileImage?: T;
  galleryImages?:
    | T
    | {
        url?: T;
        id?: T;
      };
  bio?: T;
  profession?: T;
  startups?: T;
  updatedAt?: T;
  createdAt?: T;
  email?: T;
  resetPasswordToken?: T;
  resetPasswordExpiration?: T;
  salt?: T;
  hash?: T;
  loginAttempts?: T;
  lockUntil?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media_select".
 */
export interface MediaSelect<T extends boolean = true> {
  alt?: T;
  updatedAt?: T;
  createdAt?: T;
  url?: T;
  thumbnailURL?: T;
  filename?: T;
  mimeType?: T;
  filesize?: T;
  width?: T;
  height?: T;
  focalX?: T;
  focalY?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "attributes_select".
 */
export interface AttributesSelect<T extends boolean = true> {
  label?: T;
  category?: T;
  description?: T;
  image?: T;
  users?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "attribute-categories_select".
 */
export interface AttributeCategoriesSelect<T extends boolean = true> {
  title?: T;
  slug?: T;
  description?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "user-attributes_select".
 */
export interface UserAttributesSelect<T extends boolean = true> {
  user?: T;
  attribute?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "organizers_select".
 */
export interface OrganizersSelect<T extends boolean = true> {
  name?: T;
  slug?: T;
  about?: T;
  headerImage?: T;
  events?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "events_select".
 */
export interface EventsSelect<T extends boolean = true> {
  name?: T;
  slug?: T;
  date?: T;
  streetAddress?: T;
  location?: T;
  headerImage?: T;
  about?: T;
  organizer?: T;
  capacity?: T;
  ticketsSold?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "tickets_select".
 */
export interface TicketsSelect<T extends boolean = true> {
  event?: T;
  user?: T;
  seatNumber?: T;
  tableNumber?: T;
  code?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "professions_select".
 */
export interface ProfessionsSelect<T extends boolean = true> {
  user?: T;
  professionalField?: T;
  jobTitle?: T;
  jobDescription?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "startups_select".
 */
export interface StartupsSelect<T extends boolean = true> {
  user?: T;
  title?: T;
  stage?: T;
  description?: T;
  industries?: T;
  supportNeeded?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents_select".
 */
export interface PayloadLockedDocumentsSelect<T extends boolean = true> {
  document?: T;
  globalSlug?: T;
  user?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences_select".
 */
export interface PayloadPreferencesSelect<T extends boolean = true> {
  user?: T;
  key?: T;
  value?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations_select".
 */
export interface PayloadMigrationsSelect<T extends boolean = true> {
  name?: T;
  batch?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "auth".
 */
export interface Auth {
  [k: string]: unknown;
}


declare module 'payload' {
  export interface GeneratedTypes extends Config {}
}